{"version":3,"file":"static/js/661.842ab16c.chunk.js","mappings":"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","sources":["components/Who.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\n\r\nconst sentences = [\r\n  { text: \"I am Crypto Ant, a Blockchain Developer dedicated to building decentralized solutions that empower users and protect their privacy.\", delay: 0 },\r\n  { text: \"I create engaging DApps that enhance user experience and promote decentralization. \", delay: 4300 },\r\n  { text: \"My mission is to explore blockchain's potential and make a meaningful impact with each project.\", delay: 7000 },\r\n  { text: \"Explore my portfolio to see how I can help bring your vision to life.\", delay: 10500 }\r\n];\r\n\r\nconst Who: React.FC = () => {\r\n  const [animationStarted, setAnimationStarted] = useState(false);\r\n  const [paragraphVisible, setParagraphVisible] = useState(false);\r\n\r\n  const sectionRef = useRef<HTMLDivElement>(null);\r\n  const imgRef = useRef<HTMLDivElement>(null);\r\n  const hoRef = useRef<HTMLDivElement>(null);\r\n  const iRef = useRef<HTMLDivElement>(null);\r\n  const amRef = useRef<HTMLDivElement>(null);\r\n  const [animateEnabled, setAnimateEnabled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Start the animation enable timer 5 seconds after the page loads\r\n    const timer = setTimeout(() => {\r\n      setAnimateEnabled(true);\r\n    }, 1200);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const handleScroll = (entries: IntersectionObserverEntry[]) => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        setTimeout(() => {\r\n          setAnimationStarted(true);\r\n          setTimeout(() => setParagraphVisible(true), 1200); // Delay for paragraph to appear\r\n        }, 500);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleAnimation = (ref: React.RefObject<HTMLSpanElement>) => {\r\n    if (animateEnabled && ref.current) {\r\n      \r\n      // Check if the animation class is already present\r\n      if (ref.current.classList.contains('animate-yesIm')) {\r\n        return; // If already animated, early return\r\n      }\r\n      \r\n      const classes = Array.from(ref.current.classList); // Convert DOMTokenList to an array\r\n\r\n      // Remove all animate classes\r\n      classes.forEach(cls => {\r\n        if (cls.startsWith('animate') && ref.current) {\r\n          ref.current.classList.remove(cls);\r\n        }\r\n      });\r\n\r\n      // Add the new animation class\r\n      ref.current.classList.add('animate-yesIm');\r\n\r\n      // Remove the animation class after it finishes to allow re-triggering\r\n      setTimeout(() => {\r\n        ref.current?.classList.remove('animate-yesIm');\r\n\r\n      }, 1000); // Duration of the animation\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(handleScroll, { threshold: 0.1 });\r\n    if (sectionRef.current) {\r\n      observer.observe(sectionRef.current);\r\n    }\r\n    return () => {\r\n      if (sectionRef.current) {\r\n        observer.unobserve(sectionRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <section ref={sectionRef} id=\"who\" className=\"py-20 min-h-screen w-full\">\r\n      <h2 className=\"text-4xl sm:text-6xl text-center flex justify-center items-center mb-20\">\r\n        <span\r\n          className={`w-[66px] sm:w-[100px] rounded-full cursor-pointer ${animationStarted ? 'animate-slide-in-left' : 'invisible'} transition-all duration-300`}\r\n          onClick={() => handleAnimation(imgRef)}  ref={imgRef}\r\n        >\r\n          <img src={process.env.PUBLIC_URL + \"/img/ring-1_2.png\"} alt=\"logo\" className=\"grow-shrink-1\" />\r\n        </span>\r\n        <span onClick={() => handleAnimation(hoRef)} ref={hoRef} className={`z-10 transition-transform duration-1000 ${animationStarted ? 'animate-slide-in-left' : 'invisible'}`}>\r\n          ho\r\n        </span>\r\n        <span onClick={() => handleAnimation(iRef)} ref={iRef} className={`transition-transform duration-1000 ${animationStarted ? 'animate-bounce' : 'invisible'}`}>\r\n        &nbsp;I&nbsp;\r\n        </span>\r\n        <span onClick={() => handleAnimation(amRef)} ref={amRef} className={`transition-transform duration-1000 ${animationStarted ? 'animate-slide-in-right' : 'invisible'}`}>\r\n          am\r\n        </span>\r\n      </h2>\r\n      <div className='w-full grid xl:grid-cols-2 sm:grid-cols-1 gap-4 items-center'>\r\n        <div className=\"px-5 xl:p-0 md:px-20 sm:px-10\">\r\n          {sentences.map((sentence, index) => (\r\n            <p key={index} className={`mt-4 md:text-2xl sm:text-xl transition-opacity duration-1000` + ' c-h-' + String(index)}>\r\n              &nbsp;{paragraphVisible && <TypingText text={sentence.text} delay={sentence.delay} />}\r\n            </p>\r\n          ))}\r\n        </div>\r\n        <div className={`w-full px-5 xl:p-0 md:px-20 sm:px-10`} style={{ height: 'fit-content' }}> \r\n          <div className={`w-full my-box-shadow  transition-transform duration-3000 clickable ${paragraphVisible ? 'animate-slide-in-right' : 'opacity-0'}`}>\r\n            <img src={process.env.PUBLIC_URL + \"/img/coding.gif\"} alt=\"logo\" className='w-full' />\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst TypingText = ({ text, delay }: { text: string; delay: number }) => {\r\n  const [displayText, setDisplayText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      let index = 0;\r\n      const interval = setInterval(() => {\r\n        if (index < text.length) {\r\n          setDisplayText(() => text.substring(0, index + 1)); // Appending one character at a time\r\n          index++;\r\n        } else {\r\n          clearInterval(interval); // Clear interval when done\r\n        }\r\n      }, 30); // Typing speed\r\n\r\n      return () => clearInterval(interval); // Cleanup interval on component unmount\r\n    }, delay); // Delay before starting typing\r\n\r\n    return () => clearTimeout(timeout); // Cleanup timeout on component unmount\r\n  }, [text, delay]); // Dependency on text and delay\r\n\r\n  return <span className='typing-sentence'>{displayText}</span>;\r\n};\r\n\r\nexport default Who;"],"names":["sentences","text","delay","TypingText","_ref","displayText","setDisplayText","useState","useEffect","timeout","setTimeout","index","interval","setInterval","length","substring","clearInterval","clearTimeout","_jsx","className","children","Who","animationStarted","setAnimationStarted","paragraphVisible","setParagraphVisible","sectionRef","useRef","imgRef","hoRef","iRef","amRef","animateEnabled","setAnimateEnabled","timer","handleScroll","entries","forEach","entry","isIntersecting","handleAnimation","ref","current","classList","contains","Array","from","cls","startsWith","remove","add","_ref$current","observer","IntersectionObserver","threshold","observe","unobserve","_jsxs","id","onClick","src","process","alt","map","sentence","String","style","height"],"sourceRoot":""}