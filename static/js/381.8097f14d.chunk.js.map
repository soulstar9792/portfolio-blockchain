{"version":3,"file":"static/js/381.8097f14d.chunk.js","mappings":"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","sources":["components/Welcome.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './styles.css'; // Ensure styles are properly loaded\r\n\r\nconst Welcome: React.FC = () => {\r\n  const [animationStarted, setAnimationStarted] = useState(false);\r\n  const [growShrinkStarted, setGrowShrinkStarted] = useState(false);\r\n  const [sSAnimationStart, setSSAnimationStart] = useState(false);\r\n  const [sSAnimationEnd, setSSAnimationEnd] = useState(false);\r\n  const [paragraphVisible, setParagraphVisible] = useState(false);\r\n  const [showSecondTypingText, setShowSecondTypingText] = useState(false);\r\n  const [showThirdTypingText, setShowThirdTypingText] = useState(false);\r\n\r\n  const elcomeRef = useRef<HTMLSpanElement>(null);\r\n  const toRef = useRef<HTMLSpanElement>(null);\r\n  const ssRef = useRef<HTMLSpanElement>(null);\r\n  const _sRef = useRef<HTMLSpanElement>(null);\r\n  const portfolioRef = useRef<HTMLSpanElement>(null);\r\n  const exclamationRef = useRef<HTMLSpanElement>(null);\r\n  const [animateEnabled, setAnimateEnabled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Start the animation enable timer 5 seconds after the page loads\r\n    const timer = setTimeout(() => {\r\n      setAnimateEnabled(true);\r\n    }, 4000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timeout1 = setTimeout(() => {\r\n      setAnimationStarted(true);\r\n\r\n      setTimeout(() => {\r\n        setGrowShrinkStarted(true);\r\n      }, 1000);\r\n\r\n      setTimeout(() => {\r\n        setParagraphVisible(true);\r\n        setSSAnimationStart(true);\r\n      }, 2000);\r\n      setTimeout(() => {\r\n        setSSAnimationEnd(true);\r\n      }, 3000);\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearTimeout(timeout1);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (paragraphVisible) {\r\n      const timeout2 = setTimeout(() => {\r\n        setShowSecondTypingText(true);\r\n      }, 4000); // Show second text after 5 seconds\r\n\r\n      return () => clearTimeout(timeout2);\r\n    }\r\n  }, [paragraphVisible]);\r\n\r\n  useEffect(() => {\r\n    if (showSecondTypingText) {\r\n      const timeout3 = setTimeout(() => {\r\n        setShowThirdTypingText(true);\r\n      }, 3000); // Show third text after 4 seconds\r\n\r\n      return () => clearTimeout(timeout3);\r\n    }\r\n  }, [showSecondTypingText]);\r\n\r\n  const handleAnimation = (ref: React.RefObject<HTMLSpanElement>) => {\r\n    if (animateEnabled && ref.current) {\r\n      \r\n      // Check if the animation class is already present\r\n      if (ref.current.classList.contains('animate-yesIm')) {\r\n        return; // If already animated, early return\r\n      }\r\n\r\n      const classes = Array.from(ref.current.classList); // Convert DOMTokenList to an array\r\n\r\n      // Remove all animate classes\r\n      classes.forEach(cls => {\r\n        if (cls.startsWith('animate') && ref.current) {\r\n          ref.current.classList.remove(cls);\r\n        }\r\n      });\r\n\r\n      // Add the new animation class\r\n      ref.current.classList.add('animate-yesIm');\r\n\r\n      // Remove the animation class after it finishes to allow re-triggering\r\n      setTimeout(() => {\r\n        ref.current?.classList.remove('animate-yesIm');\r\n\r\n      }, 1000); // Duration of the animation\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section id=\"welcome\" className=\"flex w-full min-h-screen py-20 flex-col items-center justify-evenly\">\r\n      <div className=\"relative w-full flex flex-col flex-wrap items-center\">\r\n        <h2 className=\"xl:text-8xl lg:text-6xl md:text-5xl sm:text-4xl text-4xl font-bold relative flex align-center justify-center flex-wrap items-center\">\r\n          <span\r\n            onClick={() => handleAnimation(elcomeRef)}\r\n            className={`${animationStarted ? 'animate-bounce' : 'invisible'} ${growShrinkStarted ? 'grow-shrink-1' : ''}`}\r\n          >\r\n            <div className=\"flex justify-center\">\r\n              <div className=\"bg-transparent xl:w-60 lg:w-40 md:w-32 sm:w-20 w-20  rounded-full animate-pulse\">  \r\n                <img src={process.env.PUBLIC_URL + \"/img/ring-1_1.png\"} alt=\"logo\" />\r\n              </div>\r\n            </div>\r\n          </span>\r\n          <span\r\n            ref={elcomeRef}\r\n            onClick={() => handleAnimation(elcomeRef)}\r\n            className={`transition-opacity duration-1000 ${animationStarted ? 'animate-slide-in' : 'invisible'}`}\r\n          >\r\n            elcome\r\n          </span>\r\n          <span\r\n            ref={toRef}\r\n            onClick={() => handleAnimation(toRef)}\r\n            className={`transition-opacity duration-1000 ${growShrinkStarted ? \"opacity-100\" : \"opacity-0\"}`}\r\n          >\r\n            &nbsp;to&nbsp;\r\n          </span>\r\n          <span\r\n            ref={ssRef}\r\n            onClick={() => handleAnimation(ssRef)}\r\n            className={`transition-all duration-1000 ${sSAnimationStart && !sSAnimationEnd ? 'animate-bounce' : (!sSAnimationEnd && 'invisible')} ${sSAnimationEnd ? ' animate-pulse' : ''}`}\r\n            style={{ color: 'rgb(253,37,37)' }}\r\n          >\r\n            S.S\r\n          </span>\r\n          <span\r\n            ref={_sRef}\r\n            onClick={() => handleAnimation(_sRef)}\r\n            className={`transition-opacity duration-1000 ${growShrinkStarted ? \"opacity-100\" : \"opacity-0\"}`}\r\n          >'s&nbsp;\r\n          </span>\r\n          <span\r\n            ref={portfolioRef}\r\n            onClick={() => handleAnimation(portfolioRef)}\r\n            className={`transition-opacity duration-1000 ${growShrinkStarted ? \"opacity-100\" : \"opacity-0\"}`}\r\n          >\r\n           Portfolio\r\n          </span>\r\n          <span\r\n            ref={exclamationRef}\r\n            onClick={() => handleAnimation(exclamationRef)}\r\n            className={`transition-opacity duration-1000 ${growShrinkStarted ? \"opacity-100\" : \"opacity-0\"}`}\r\n          >\r\n            !\r\n          </span>\r\n        </h2>\r\n      </div>\r\n      <p className={`xl:text-4xl sm:text-2xl transition-opacity text-center duration-1000 ${paragraphVisible ? \"opacity-100\" : \"opacity-0\"}`}>\r\n        &nbsp;{paragraphVisible && (\r\n          <TypingText text=\"Blockchain Alchemist who crafts the next generation of blockchains.\" />\r\n        )}\r\n      </p>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst TypingText = ({ text }: { text: string }) => {\r\n  const [displayText, setDisplayText] = useState('');\r\n\r\n  useEffect(() => {\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < text.length) {\r\n        setDisplayText(() => text.substring(0, index + 1));\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n      }\r\n    }, 60);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [text]);\r\n\r\n  // Split the displayText into words\r\n  const words = displayText.split(' ');\r\n\r\n  return (\r\n    <span>\r\n      {words.map((word, idx) => (\r\n        <span key={idx} className=\"typing-text\"> {/* Add margin for spacing */}\r\n          &nbsp;{word}\r\n        </span>\r\n      ))}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Welcome;"],"names":["TypingText","_ref","text","displayText","setDisplayText","useState","useEffect","index","interval","setInterval","length","substring","clearInterval","words","split","_jsx","children","map","word","idx","_jsxs","className","Welcome","animationStarted","setAnimationStarted","growShrinkStarted","setGrowShrinkStarted","sSAnimationStart","setSSAnimationStart","sSAnimationEnd","setSSAnimationEnd","paragraphVisible","setParagraphVisible","showSecondTypingText","setShowSecondTypingText","showThirdTypingText","setShowThirdTypingText","elcomeRef","useRef","toRef","ssRef","_sRef","portfolioRef","exclamationRef","animateEnabled","setAnimateEnabled","timer","setTimeout","clearTimeout","timeout1","timeout2","timeout3","handleAnimation","ref","current","classList","contains","Array","from","forEach","cls","startsWith","remove","add","_ref$current","id","onClick","src","process","alt","style","color"],"sourceRoot":""}