{"version":3,"file":"static/js/773.2c29bb0e.chunk.js","mappings":"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","sources":["components/StarryBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\n// Define a type for our star\r\ninterface Star {\r\n    x: number;\r\n    y: number;\r\n    radius: number;\r\n    alpha: number;\r\n    targetRadius?: number;\r\n    targetAlpha?: number;\r\n    speedX?: number;\r\n    speedY?: number;\r\n}\r\n\r\nconst StarryBackground: React.FC = () => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    const hoverPosition = useRef<{ x: number; y: number } | null>(null);\r\n    \r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas?.getContext('2d');\r\n        if (!canvas || !ctx) return;\r\n\r\n        let stars: Star[] = [];\r\n        const initialStarCount: number = 100;\r\n        const maxStars = 200;\r\n\r\n        const resizeCanvas = () => {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        };\r\n\r\n        const generateStar = (x: number, y: number) => {\r\n            const radius = Math.random() * 2 + 0.5;\r\n            const alpha = Math.random() * 0.5 + 0.5;\r\n            const speedX = (Math.random() - 0.5) * 0.5;\r\n            const speedY = (Math.random() - 0.5) * 0.5;\r\n            \r\n            stars.push({\r\n                x,\r\n                y,\r\n                radius,\r\n                alpha,\r\n                targetRadius: radius,\r\n                targetAlpha: alpha,\r\n                speedX,\r\n                speedY,\r\n            });\r\n        };\r\n\r\n        const generateInitialStars = () => {\r\n            for (let i = 0; i < initialStarCount; i++) {\r\n                const x = Math.random() * canvas.width;\r\n                const y = Math.random() * canvas.height;\r\n                generateStar(x, y);\r\n            }\r\n        };\r\n\r\n        const drawStars = () => {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            stars.forEach(star => {\r\n                ctx.beginPath();\r\n                ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2, false);\r\n                ctx.fillStyle = `rgba(255, 255, 255, ${star.alpha})`;\r\n                ctx.fill();\r\n                ctx.closePath();\r\n            });\r\n        };\r\n\r\n        const updateStars = () => {\r\n            stars.forEach(star => {\r\n                star.radius += (star.targetRadius! - star.radius) * 0.1;\r\n                star.alpha += (star.targetAlpha! - star.alpha) * 0.1;\r\n\r\n                if (Math.random() < 0.01) {\r\n                    star.targetRadius = Math.random() * 2 + 0.5;\r\n                    star.targetAlpha = Math.random() * 0.5 + 0.5;\r\n                }\r\n\r\n                // Update star positions\r\n                star.x += star.speedX!;\r\n                star.y += star.speedY!;\r\n\r\n                if (star.x < 0) star.x = 0;\r\n                if (star.x > canvas.width) star.x = canvas.width;\r\n                if (star.y < 0) star.y = 0;\r\n                if (star.y > canvas.height) star.y = canvas.height;\r\n            });\r\n\r\n            if (stars.length > maxStars) {\r\n                stars.splice(0, stars.length - maxStars);\r\n            }\r\n        };\r\n\r\n        const animateStars = () => {\r\n            updateStars();\r\n            drawStars();\r\n            requestAnimationFrame(animateStars);\r\n        };\r\n\r\n        let lastScrollY = window.scrollY; // Keep track of the last scroll position\r\n\r\n        const handleScroll = () => {\r\n            const currentScrollY = window.scrollY;\r\n            const scrollDirection = currentScrollY - lastScrollY; // Determine scroll direction\r\n            \r\n            const flowDistance = Math.abs(scrollDirection) / 1000; // Scale the flow distance based on scroll amount\r\n            \r\n            stars.forEach(star => {\r\n                if (scrollDirection > 0) {\r\n                    // Scrolling down: move stars up\r\n                    star.y -= flowDistance; \r\n                } else {\r\n                    // Scrolling up: move stars down\r\n                    star.y += flowDistance; \r\n                }\r\n\r\n                // Wrap around logic\r\n                if (star.y < 0) {\r\n                    star.y = canvas.height; // Reset to the bottom of the canvas\r\n                    star.x = Math.random() * canvas.width; // Randomize x position\r\n                } else if (star.y > canvas.height) {\r\n                    star.y = 0; // Reset to the top of the canvas\r\n                    star.x = Math.random() * canvas.width; // Randomize x position\r\n                }\r\n            });\r\n\r\n            lastScrollY = currentScrollY; // Update last scroll position\r\n        };\r\n\r\n        const handleClick = (event: MouseEvent) => {\r\n            const { clientX, clientY } = event;\r\n            generateStar(clientX, clientY);\r\n        };\r\n\r\n        const handleMouseMove = (event: MouseEvent) => {\r\n            const { clientX, clientY } = event;\r\n            hoverPosition.current = { x: clientX, y: clientY };\r\n        };\r\n\r\n        const updateStarsOnHover = () => {\r\n            if (hoverPosition.current) {\r\n                const { x, y } = hoverPosition.current;\r\n                stars.forEach(star => {\r\n                    const dx = star.x - x;\r\n                    const dy = star.y - y;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    if (distance < 100) {\r\n                        star.targetAlpha = Math.min(1, star.alpha + 0.1);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        resizeCanvas();\r\n        generateInitialStars();\r\n        animateStars();\r\n\r\n        window.addEventListener('resize', resizeCanvas);\r\n        window.addEventListener('click', handleClick);\r\n        window.addEventListener('mousemove', handleMouseMove);\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        const renderLoop = () => {\r\n            updateStarsOnHover();\r\n            requestAnimationFrame(renderLoop);\r\n        };\r\n        renderLoop();\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', resizeCanvas);\r\n            window.removeEventListener('click', handleClick);\r\n            window.removeEventListener('mousemove', handleMouseMove);\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'black', zIndex: -1 }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default StarryBackground;"],"names":["StarryBackground","canvasRef","useRef","hoverPosition","useEffect","canvas","current","ctx","getContext","stars","resizeCanvas","width","window","innerWidth","height","innerHeight","generateStar","x","y","radius","Math","random","alpha","speedX","speedY","push","targetRadius","targetAlpha","animateStars","forEach","star","length","splice","clearRect","beginPath","arc","PI","fillStyle","fill","closePath","requestAnimationFrame","lastScrollY","scrollY","handleScroll","currentScrollY","scrollDirection","flowDistance","abs","handleClick","event","clientX","clientY","handleMouseMove","generateInitialStars","i","addEventListener","renderLoop","updateStarsOnHover","dx","dy","sqrt","min","removeEventListener","_jsx","ref","style","position","top","left","right","bottom","backgroundColor","zIndex"],"sourceRoot":""}